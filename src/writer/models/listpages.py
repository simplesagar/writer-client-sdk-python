"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from .paginatedresult_pagepublicapiresponse import PaginatedResultPagePublicAPIResponse
from enum import Enum
from typing import Dict, List, Optional

class QueryParamStatus(str, Enum):
    LIVE = 'live'
    OFFLINE = 'offline'


@dataclasses.dataclass
class ListPagesRequest:
    limit: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': True }})
    offset: Optional[int] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': True }})
    status: Optional[QueryParamStatus] = dataclasses.field(default=None, metadata={'query_param': { 'field_name': 'status', 'style': 'form', 'explode': True }})
    



@dataclasses.dataclass
class ListPagesResponse:
    content_type: str = dataclasses.field()
    r"""HTTP response content type for this operation"""
    status_code: int = dataclasses.field()
    r"""HTTP response status code for this operation"""
    headers: Optional[Dict[str, List[str]]] = dataclasses.field(default=None)
    paginated_result_page_public_api_response: Optional[PaginatedResultPagePublicAPIResponse] = dataclasses.field(default=None)
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    r"""Raw HTTP response; suitable for custom response parsing"""
    

